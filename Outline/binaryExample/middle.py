"""
-----------------------------------------------------------------------------------------
位运算技巧
https://blog.csdn.net/morewindows/article/details/7354571
-----------------------------------------------------------------------------------------
"""

"""
-----------------------------------------------------------------------------------------
使用异或三性质： 
0 ^ m = 0
m ^ m = 0
a ^ b ^ c = a ^ c ^ b 

实际应用：
- 交换两个变量
- 寻找数组中只出现一次的数字（一个数字）
- 寻找数组中只出现一次的数字（两个数字）
-----------------------------------------------------------------------------------------
"""


# 两个数字交换 ==》 不使用额外空间
def swap(x, y):
    x ^= y
    y ^= x
    x ^= y
    return x, y


"""
-----------------------------------------------------------------------------------------
- 不使用判断语句，不使用内置函数，计算绝对值
-----------------------------------------------------------------------------------------
"""


def bit_abs(num):
    # 前提：程序运行环境中操作系统为32位，int类型(不考虑整数溢出)使用32位存储
    # 获取符号位： 正数为0 负数为1
    negative = num >> 32  # 只有一位： 0 或 1
    # num最右侧位置的位置与negative计算异或，其他位置与0进行异或，仍然是自身
    # 当negative为0，没有影响；当为1时，会 +1 或 -1；所以末尾的 -negative
    res = (num ^ negative) - negative
    return res


if __name__ == '__main__':
    print(-10 ^ 1)
    print(10 ^ 1)
