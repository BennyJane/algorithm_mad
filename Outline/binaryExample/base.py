"""
-----------------------------------------------------------------------------------------
二进制基础
计算机中对数字的表示有三种方式：原码，反码，补码：
原码表示法在数值前面增加了一位符号位（即最高位为符号位）：正数该位为0，负数该位为1。比如十进制3如果用8个二进制位来表示就是 00000011， -3就是 10000011。
反码表示方法：正数的反码是其本身；负数的反码是在其原码的基础上，符号位不变，其余各个位取反。
补码表示方法：正数的补码是其本身；负数的补码是在其原码的基础上，符号位不变，其余各位取反，最后+1。 (即在反码的基础上+1)


参考文章：
https://www.cnblogs.com/zhangziqiu/archive/2011/03/30/ComputerCode.html

-----------------------------------------------------------------------------------------
"""
# 数值之间： 二进制 八进制 十进制 十六进制转换
# 使用内置函数： bin oct hex 函数
# TODO 自定义函数实现， __init__文件中


# 二进制： 前缀0b
num = 10
bin_res = bin(10)
print(bin_res)  # bin()函数，转二进制, 二进制前缀 0b
# format() 返回值：Return value.__format__(format_spec)
# format函数中format_spec，配置返回结果
bin_res_cleaned = format(num, "b")
print(bin_res_cleaned)  # format()函数，转二进制, 删除前缀
# str.format()
bin_res_by_str = "{0:b}".format(num)
print(bin_res_by_str)  # 删除前缀

# 八进制: 前缀 0o
oct_res = oct(num)
print(oct_res)

# 16进制: 前缀 0x
hex_res = hex(num)
print(hex_res)

# 其他进制转10进制
print(int("1010", 2))
print(int("0o12", 8))  # 可以省略前缀0o
print(int("12", 8))
print(int("0xa", 16))
print(int("a", 16))

# 位运算
# & 与 相同位置均为1，计算结果才是1，其他情况为0
# | 与 相同位置有一个1，计算结果就是1，只有当都是0，才为0
# ~ 非 每个位置0转1， 1转0
# ^ 异或 相同位置不同，结果为1
# << 左移n位，高位丢弃，低位补0
# >> 右移n位，无符号位，高位补0；有符号位，各编译器处理方法不一样，有的补符号位，有的补0

# << 符号：将原有数字的二进制形式，向左移动n个位子，即在右侧添加n个0
print(-1 << 10)
print(0 << 10)
print(1 << 10)
print(2 << 10)
print(3 << 10)

print(-1 << 29)
print(-0 << 29)
print(1 << 29)

